// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/pay_loan_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/billing-engine/internal/repository/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIPayLoanRepository is a mock of IPayLoanRepository interface.
type MockIPayLoanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPayLoanRepositoryMockRecorder
}

// MockIPayLoanRepositoryMockRecorder is the mock recorder for MockIPayLoanRepository.
type MockIPayLoanRepositoryMockRecorder struct {
	mock *MockIPayLoanRepository
}

// NewMockIPayLoanRepository creates a new mock instance.
func NewMockIPayLoanRepository(ctrl *gomock.Controller) *MockIPayLoanRepository {
	mock := &MockIPayLoanRepository{ctrl: ctrl}
	mock.recorder = &MockIPayLoanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPayLoanRepository) EXPECT() *MockIPayLoanRepositoryMockRecorder {
	return m.recorder
}

// BatchInsert mocks base method.
func (m *MockIPayLoanRepository) BatchInsert(ctx context.Context, datas []entity.PayLoanEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsert", ctx, datas)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchInsert indicates an expected call of BatchInsert.
func (mr *MockIPayLoanRepositoryMockRecorder) BatchInsert(ctx, datas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsert", reflect.TypeOf((*MockIPayLoanRepository)(nil).BatchInsert), ctx, datas)
}

// GetInSpecificTimeAndStatus mocks base method.
func (m *MockIPayLoanRepository) GetInSpecificTimeAndStatus(ctx context.Context, loanId int, timeNow time.Time) ([]entity.PayLoanEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInSpecificTimeAndStatus", ctx, loanId, timeNow)
	ret0, _ := ret[0].([]entity.PayLoanEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInSpecificTimeAndStatus indicates an expected call of GetInSpecificTimeAndStatus.
func (mr *MockIPayLoanRepositoryMockRecorder) GetInSpecificTimeAndStatus(ctx, loanId, timeNow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInSpecificTimeAndStatus", reflect.TypeOf((*MockIPayLoanRepository)(nil).GetInSpecificTimeAndStatus), ctx, loanId, timeNow)
}

// GetPayLoanByLoanId mocks base method.
func (m *MockIPayLoanRepository) GetPayLoanByLoanId(ctx context.Context, loandId int) ([]entity.PayLoanEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayLoanByLoanId", ctx, loandId)
	ret0, _ := ret[0].([]entity.PayLoanEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayLoanByLoanId indicates an expected call of GetPayLoanByLoanId.
func (mr *MockIPayLoanRepositoryMockRecorder) GetPayLoanByLoanId(ctx, loandId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayLoanByLoanId", reflect.TypeOf((*MockIPayLoanRepository)(nil).GetPayLoanByLoanId), ctx, loandId)
}

// Update mocks base method.
func (m *MockIPayLoanRepository) Update(ctx context.Context, id int, data entity.PayLoanEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIPayLoanRepositoryMockRecorder) Update(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPayLoanRepository)(nil).Update), ctx, id, data)
}
