// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/loan_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	entity "github.com/billing-engine/internal/repository/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockILoanRepository is a mock of ILoanRepository interface.
type MockILoanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockILoanRepositoryMockRecorder
}

// MockILoanRepositoryMockRecorder is the mock recorder for MockILoanRepository.
type MockILoanRepositoryMockRecorder struct {
	mock *MockILoanRepository
}

// NewMockILoanRepository creates a new mock instance.
func NewMockILoanRepository(ctrl *gomock.Controller) *MockILoanRepository {
	mock := &MockILoanRepository{ctrl: ctrl}
	mock.recorder = &MockILoanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILoanRepository) EXPECT() *MockILoanRepositoryMockRecorder {
	return m.recorder
}

// CreateLoan mocks base method.
func (m *MockILoanRepository) CreateLoan(ctx context.Context, data entity.LoanEntity) (entity.LoanEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", ctx, data)
	ret0, _ := ret[0].(entity.LoanEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockILoanRepositoryMockRecorder) CreateLoan(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockILoanRepository)(nil).CreateLoan), ctx, data)
}

// Get mocks base method.
func (m *MockILoanRepository) Get(ctx context.Context, username string, status int) (entity.LoanEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, username, status)
	ret0, _ := ret[0].(entity.LoanEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockILoanRepositoryMockRecorder) Get(ctx, username, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockILoanRepository)(nil).Get), ctx, username, status)
}

// GetByStatus mocks base method.
func (m *MockILoanRepository) GetByStatus(ctx context.Context, status int) ([]entity.LoanEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", ctx, status)
	ret0, _ := ret[0].([]entity.LoanEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockILoanRepositoryMockRecorder) GetByStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockILoanRepository)(nil).GetByStatus), ctx, status)
}

// UpdateStatus mocks base method.
func (m *MockILoanRepository) UpdateStatus(ctx context.Context, loanId, status int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, loanId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockILoanRepositoryMockRecorder) UpdateStatus(ctx, loanId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockILoanRepository)(nil).UpdateStatus), ctx, loanId, status)
}
